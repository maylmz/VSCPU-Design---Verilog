
// Code your testbench here
// or browse Examples
module tb_TinyMIPS;
    parameter SIZE = 8, DEPTH = 2**SIZE;
    reg clk, rst;
    wire wrEn;
 	wire [7:0] addr_toRAM;
    wire [15:0] data_toRAM, data_fromRAM;

    TinyMIPS uut1 (clk, rst, data_fromRAM, wrEn, addr_toRAM, data_toRAM);
    blram #(SIZE, DEPTH) uut2 (clk, rst, wrEn, addr_toRAM, data_toRAM, data_fromRAM);

    initial begin
		clk = 1;
		forever
			#5 clk = ~clk;
	end

	initial begin
		rst = 1;
		repeat (10) @(posedge clk);
		rst <= #1 0;
		repeat (600) @(posedge clk);
		$finish;
	end
  
  	initial begin

    	$dumpfile("test.vcd");
      $dumpvars(0, tb_test4);
       
      
      
      //test4
       	uut2.mem[0] = 16'b0111001000000101; // CPi R1 5
        uut2.mem[1] = 16'b0111010000000000; // CPi R2 0
        uut2.mem[2] = 16'b0110011010000000; // CP R3 R2
        uut2.mem[3] = 16'b0111100000000010; // CPi R4 2
        uut2.mem[4] = 16'b0100101001001110; // LD R5 R1 14
        uut2.mem[5] = 16'b1000101011000100; // BEQ R5 R3 4
        uut2.mem[6] = 16'b0001101101000101; // ADDi R5 R5 5
        uut2.mem[7] = 16'b0011101101100000; // SRL R5 R5 R4
        uut2.mem[8] = 16'b0101101001001110; // ST R5 R1 14
        uut2.mem[9] = 16'b0001001001111111; // ADDi R1 R1 -1
        uut2.mem[10] = 16'b1010001010111010; // BGT R1 R2 -6
        uut2.mem[15] = 16'b0000000000000101; // Data
        uut2.mem[16] = 16'b0000000000000000; // Data
        uut2.mem[17] = 16'b0000000000001111; // Data
        uut2.mem[18] = 16'b0000000000010001; // Data
        uut2.mem[19] = 16'b0000000000010110; // Data
  

        // Monitor for debugging
         $monitor("Time: %d, PC: %d, wrEn: %b, addr_toRAM: %h, data_toRAM: %h, data_fromRAM: %h, uut.RF[15]: %d", 
               $time, uut1.PC, wrEn, addr_toRAM, data_toRAM, data_fromRAM, uut2.mem[15], uut2.mem[16], uut2.mem[17], uut2.mem[18], uut2.mem[19]);
  	end
    
    end
  	
endmodule
